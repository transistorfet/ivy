
2023-07-12:
- for the case, there is a 63HP and a 42HP, and a 271mm and 331mm (the 391mm is way too big)
- the 331mm is also kind of big if I wanted to put it under my oscilloscope on the shelf.  271 would fit more comfortably without
  sticking out.  Hopefully it's big enough
- the 63HP (364mm) is just a bit too wide to fit in the spot next to the book, it's a squeeze but possible
- the alternative is the 42HP (257mm) is too narrow for the oscilloscope =/
- the 42HP is a bit big but would fit below the books on the middle shelf, but that shelf already has a lot on it

- It seems like CompactPCI systems are designed with a single system slot, and the rest are peripheral-only slots.  There are some
  dual system slot designs that I can't find much documentation on, but generally they seem to be single-system (single-CPU card).
- the only thing I can figure that requires the distinction is the SMBus which I don't need, and mainly the request/grant lines,
  which it's using for resolving which card can gain the bus.  PCI *usually* has each peripheral's request/grant lines connected to
  an arbitrer that can do whatever priority encoding it wants, but I have seen mention of using daisy chained resolution like VME
- the question is, is there another reason in the protocol layer or something that needs to be able to arbitrate differently?

- for VME I've seen it said that the CPU card usually has both the interrupt controller and the arbiter and must be plugged into
  slot 1 because of the daisy chaining
- I would either put the arbiter on the backplane, or put it on a separate card in slot 1, and then multiple CPU cards should be
  possible

2023-07-30:
- The more I think about this, the more I feel VME is the right option to choose for this iteration because it's more adaptable.  It
  can use different bus widths, and different bus timings, so it can more easily support mixed devices with easier interfacing
  requirements, possibly even without the need for a CPLD, which would be ideal
- the main issues is the connectors to use, or whether to multipex the bus
- If I choose to multiplex, I might as well redesign it and make it "inspired by VME" instead of VME specifically.  If I keep it
  otherwise the same and match the spec except for the connector, I can still call it VME

- PCI not only takes a lot more hardware, but it's supposed to be fixed to 33MHz or 66MHz, neither of which I can adhere to without
  wait states.  It doesn't seem to allow wait states

2023-07-31:
- thinking about it some more, I think larger connectors are the way to go
- for starters, a lot of peripheral devices won't actually need bus transceivers, or if they do, they'd only need them on the data
  bus.  I had been thinking I would need them on every card because I was thinking about the controllers and the possibility of
  FPGAs and microcontrollers connected to the pins, requiring transceivers to re-multiplex the bus due to limited inputs, which is
  still something to consider, but if most people would be making simple peripheral cards, then it's much easier to use a separated
  A/D bus
- if the connector is the same but with an extra row, then it'd be possible to use the same backplane with the 3-row connectors
  soldered into 4-row holes on the backplace PCB, and the cards could use 3-row connectors and be 16/24-bit cards instead of 32-bit
  cards.  So there's some flexibility there
- 3U cards over 6U cards means they're 100mm tall, and if length is not a concern, other people could order and make 100mmx100mm
  boards for cheap, again making it more accessible to other hobbyists

- but actually that "transceivers required for microcontrollers" one is not the best, but I guess there's no way around that, with the
  exception of a secondardy bus...  VMX and VSB were mentioned, as was VMS the serial protocol for the backplace
- a secondary bus is overkill.  It doesn't seem to be mentioned on modern VME equipment

- I keep glossing over this every time I come across it, and it's so poorly documented, so I'm raising attention here
  !!!!!!!!!!!!!!!!!!!!!!!!!!
  VME64 (not VME64x which introduces the grounded connectors) has provision for an A40 address space, which is capable of 40-bit
  address transfers using only the P1 connector (3U).  It does this with a special AM number, and using the DS lines to do two data
  requests while continuing to hold the AS line asserted.  I'm not sure if it can also do a 32-bit data transfer on the P1 connector
  alone but this is at least an improvement, and I could possibly even hax it to do that
- the spec actually has user-defined AM codes! I could use those to create extended cycles. 32-bit cards are probably going to have
  ATF1508 CPLDs, or FPGAs, or ARM microcontrollers, and really simple peripherals would only be 16/24-bit

2023-08-01:
- What should I named the OS:
    ComputOS, ComputieOS, ... ?
    - uwunix
    - Hobbes
    - Tinkers
    - GloOS (glo-worm)
    - PotatOS (Mr Potato Head)
    - Gloworm <---
- What should I name the multiboard computer:
    - Indie
    - Vindie (VME)
    - Labbie (labratory computer)
    - ComputiePCI/computie-pci, ComputieVME/computie-vme,
    - Industrie (because it's an industrial computer)
    - Industro
    - Controllie, Compo...
    - Laboratory, Laboratorie
    - Pieces (PCI), Pooki (PCI)

