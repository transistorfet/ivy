
2023-07-12:
- for the case, there is a 63HP and a 42HP, and a 271mm and 331mm (the 391mm is way too big)
- the 331mm is also kind of big if I wanted to put it under my oscilloscope on the shelf.  271 would fit more comfortably without
  sticking out.  Hopefully it's big enough
- the 63HP (364mm) is just a bit too wide to fit in the spot next to the book, it's a squeeze but possible
- the alternative is the 42HP (257mm) is too narrow for the oscilloscope =/
- the 42HP is a bit big but would fit below the books on the middle shelf, but that shelf already has a lot on it

- It seems like CompactPCI systems are designed with a single system slot, and the rest are peripheral-only slots.  There are some
  dual system slot designs that I can't find much documentation on, but generally they seem to be single-system (single-CPU card).
- the only thing I can figure that requires the distinction is the SMBus which I don't need, and mainly the request/grant lines,
  which it's using for resolving which card can gain the bus.  PCI *usually* has each peripheral's request/grant lines connected to
  an arbitrer that can do whatever priority encoding it wants, but I have seen mention of using daisy chained resolution like VME
- the question is, is there another reason in the protocol layer or something that needs to be able to arbitrate differently?

- for VME I've seen it said that the CPU card usually has both the interrupt controller and the arbiter and must be plugged into
  slot 1 because of the daisy chaining
- I would either put the arbiter on the backplane, or put it on a separate card in slot 1, and then multiple CPU cards should be
  possible

2023-07-30:
- The more I think about this, the more I feel VME is the right option to choose for this iteration because it's more adaptable.  It
  can use different bus widths, and different bus timings, so it can more easily support mixed devices with easier interfacing
  requirements, possibly even without the need for a CPLD, which would be ideal
- the main issues is the connectors to use, or whether to multipex the bus
- If I choose to multiplex, I might as well redesign it and make it "inspired by VME" instead of VME specifically.  If I keep it
  otherwise the same and match the spec except for the connector, I can still call it VME

- PCI not only takes a lot more hardware, but it's supposed to be fixed to 33MHz or 66MHz, neither of which I can adhere to without
  wait states.  It doesn't seem to allow wait states

2023-07-31:
- thinking about it some more, I think larger connectors are the way to go
- for starters, a lot of peripheral devices won't actually need bus transceivers, or if they do, they'd only need them on the data
  bus.  I had been thinking I would need them on every card because I was thinking about the controllers and the possibility of
  FPGAs and microcontrollers connected to the pins, requiring transceivers to re-multiplex the bus due to limited inputs, which is
  still something to consider, but if most people would be making simple peripheral cards, then it's much easier to use a separated
  A/D bus
- if the connector is the same but with an extra row, then it'd be possible to use the same backplane with the 3-row connectors
  soldered into 4-row holes on the backplace PCB, and the cards could use 3-row connectors and be 16/24-bit cards instead of 32-bit
  cards.  So there's some flexibility there
- 3U cards over 6U cards means they're 100mm tall, and if length is not a concern, other people could order and make 100mmx100mm
  boards for cheap, again making it more accessible to other hobbyists

- but actually that "transceivers required for microcontrollers" one is not the best, but I guess there's no way around that, with the
  exception of a secondardy bus...  VMX and VSB were mentioned, as was VMS the serial protocol for the backplace
- a secondary bus is overkill.  It doesn't seem to be mentioned on modern VME equipment

- I keep glossing over this every time I come across it, and it's so poorly documented, so I'm raising attention here
  !!!!!!!!!!!!!!!!!!!!!!!!!!
  VME64 (not VME64x which introduces the grounded connectors) has provision for an A40 address space, which is capable of 40-bit
  address transfers using only the P1 connector (3U).  It does this with a special AM number, and using the DS lines to do two data
  requests while continuing to hold the AS line asserted.  I'm not sure if it can also do a 32-bit data transfer on the P1 connector
  alone but this is at least an improvement, and I could possibly even hax it to do that
- the spec actually has user-defined AM codes! I could use those to create extended cycles. 32-bit cards are probably going to have
  ATF1508 CPLDs, or FPGAs, or ARM microcontrollers, and really simple peripherals would only be 16/24-bit

2023-08-01:
- What should I named the OS:
    ComputOS, ComputieOS, ... ?
    - uwunix
    - Hobbes
    - Tinkers
    - GloOS (glo-worm)
    - PotatOS (Mr Potato Head)
    - Gloworm <--- chosen
- What should I name the multiboard computer:
    Thinking about "Industrial Computer", "VME", "VersaModule Eurocard", "Laboratory Computer", "Modular Computer",
    "Modular Test Bench", "Laboratory Test Equipment", "Industrial Automation", "Retro Industrial", "Hobbyist"

    - Indie
    - Indiverse
    - VooMiE
    - Vroomie
    - Ivie
    - Ivy
    - Vindie (VME)
    - Versie
    - Versus
    - Inverse
    - Vertibie (vertebrete)
    - Vervie
    - Labbie (labratory computer)
    - Modulo
    - ComputieVME/computie-vme
    - Industrie (because it's an industrial computer)
    - Industro
    - Controllie, Compo...
    - Laboratory, Laboratorie

   Not going with PCI
    - ComputiePCI/computie-pci
    - Pieces (PCI), Pooki (PCI)

  - Parts:
    IVA for bus arbitrator/interrupt controller
    IVB for backplane
    IVC for CPU
    IVD for device (or IVP for peripheral)

2023-08-09:
- I got the connectors I ordered
- boy are those 5 row DIN 41612s chonky boys
- the press fit pins on the TE/Amp sockets look the same as the ones on the Hirose, which only said through-hole and not solder or
  press fit.  Either way, they look like they could be soldered
- the 4-row TE/Amp socket one that was specifically for soldering have very shaped pins that would give a much stronger connection
  I'd think but they're $31 (the Hirose was $29, but the pressfit TE was only $16 each)
- the TE/Amp 4-row headers look nicer, with a plastic protective shield around the pins, and cost $22 instead of $25 for the Hirose

- the 4-row headers can connect to the 3 row sockets without an issue, but not the other way around, unless you cut the plastic
  shroud, so a fancier card could plug into a slower 3-row socket, but a slow 3-row card would need a dedicated 3-row socket to
  work
- the VME64x connectors can fit 3-row and 5-row but cost $52 and $39 for the connectors
- it might be easy to make the backplane fit 3-row, 4-row, or 5-row sockets, in which case the 4-row socket would plug into the
  right most 4 rows of holes, and the 3-row would plug into the middle 3 rows of holes.  I could maybe make that clearish on the
  silkscreen

2023-08-12:
- So I'm pretty sure Mouser's website has the wrong information on the TE connectors.  It says that 216415 has solder termination,
  but it looks like what press fit should be.  The drawings show that the holes should be 1.15mm which the largest part of the pin-
  is about 1.20mm, so it would be a rather tight fit.  Infuriatingly, the TE website doesn't actually say if those connectors are
  press-fit or solderable!!!  It's missing so much information
- looking up the same part number of digikey lists it as being press-fit, and the other one, 254977-E is listed as solderable.  It's
  the one with thin flat pins.  So they're backwards between digikey and mouser, and I think digikey is correct.  They're also
  cheaper at digikey

2023-08-20:
- I need to figure out how the bytes are transferred on the bus relative to what the 68030 expects (and other CPUs), to see if you'll
  need to move bytes around using transceivers =/  That might be needed for 16-bit and 8-bit data reads, because the 68030 expects
  them to use the upper part of the data bus, but the VME specs seems to say they'll be on the lower 16-bits (makes sense)
- but yeah, I might need some complex transceiver stuff, hopefully not too much or that there's something that will do it in one
  package.  I can't bring all the I/O pins in and out of a CPLD

2023-08-24:
- I'm trying to think through the various transactions.  Firstly, it's important to remind myself that when the cpu receives a DSACK
  that signals it's a 32-bit port, it will always read the data bus as if it was 32-bits wide, which means not as much moving around
  is needed.
- the possible transactions are:
    D08(Odd)
    D08(Even)
    D16
    D32
    MD32 (multiplexed on 3U/P1)
    MBLT (64-bit multiplexed on address lines)
    (also unaligned reads)

- D32 cycles are handled correctly with direct bus connections
- D16 cycles are fine for byte 2 and 3, but reading/writing bytes 0 and 1 won't work without transfering them to the upper bus, either
  to make them be on the upper bus where they're expected for a 32-bit memory port access, or to put on the upper bus and return as
  if a 16-bit port access
- D08 O/E will also be correct as the D16 cycle, so they need that extra cross-bus transceiver

- MD32 requires a transceiver between the upper CPU data bus to the lower BUS address lines, and the upper CPU address bus to the
  lower BUS data lines
- MBLT is not really supported for 32-bit CPUs so I don't need to cover it

- I think I'll need the usual 4x16 transceivers for the address and data buses, plus 1x16 transceiver to support D16/D08E/D08O, and a
  final 2x16 to support MD32 accesses for a total of 7

2023-08-27:
- I was looking at https://www.retrobrewcomputers.org/doku.php?id=boards:sbc:mpu302 and just happened to look up DS12365, which is a
  MicroManager Chip.  The datasheet says it halts and restarts an out of control cpu, and resets the cpu during power transients.  That
  particular chip probably wouldn't do much useful for this project, but it got me thinking about a monitor circuit, possibly even an
  optional microcontroller that can operate across a wide range of voltages that could monitor and reset the CPU, and if it halts, then
  reset it.  This would be useful for things like the 68k test runner where a successful tests results in a reset.

